{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Obsidian Notes","text":"<p>Publish your public notes with MkDocs</p>"},{"location":"#hello-world","title":"Hello World!","text":"<p>The <code>index.md</code> in the <code>/docs</code> folder is the homepage you see here.</p> <p>The folders in <code>/docs</code> appear as the main sections on the navigation bar.</p> <p>The notes appear as pages within these sections. For example, [[Note 1]] in <code>Topic 1</code></p>"},{"location":"developer/Redux%20Toolkit/","title":"What is Redux?","text":"<p>Redux is a predictable state container for JavaScript apps</p>","tags":["redux"]},{"location":"developer/Redux%20Toolkit/#setup","title":"Setup","text":"<pre><code>mkdir reduxtoolkit\nnpm init -y\n</code></pre> <p>Install the Redux Package <pre><code>npm install redux\n</code></pre></p>","tags":["redux"]},{"location":"developer/Redux%20Toolkit/#redux-core-concepts","title":"Redux Core Concepts","text":"<ul> <li>A store that holds the state of your application</li> <li>An Action that describes what happened in the application</li> <li>A Reducer which handles the action and decides how to update the state</li> </ul>","tags":["redux"]},{"location":"developer/Redux%20Toolkit/#redux-principles","title":"Redux Principles","text":"<ul> <li> <p>First Principle The global state of your application is stored as an object inside a single store. Maintain your application state in a single object which would be managed by the Redux Store</p> </li> <li> <p>Second Principle The only way to change the state is to dispatch an action, an object that describes what happened. To update the state of your app, you need to let redux know about that with an action i.e Not allowed to directly update the state object.</p> </li> <li> <p>Third Principle To specify how the state tree is updated based on actions, you write pure reducers. Reducer - (previousState,action) =&gt; newState</p> </li> </ul>","tags":["redux"]},{"location":"developer/Redux%20Toolkit/#basic-redux","title":"Basic Redux","text":"","tags":["redux"]},{"location":"developer/Redux%20Toolkit/#creating-an-action","title":"Creating an Action","text":"<pre><code>const CAKE_ORDERED = \"CAKE_ORDERED\";\n\nfunction orderCake() {\n  return {\n    type: CAKE_ORDERED,\n    quantity: 1,\n  };\n}\n</code></pre>","tags":["redux"]},{"location":"developer/Redux%20Toolkit/#creating-an-reducer","title":"Creating an Reducer","text":"<pre><code>const initialState = {\n  numberOfCakes: 10,\n};\n\nconst reducer = (state = initialState, action) =&gt; {\n  switch (action.type) {\n    case CAKE_ORDERED:\n      return {\n        ...state,\n        numberOfCakes: state.numberOfCakes - 1,\n      };\n    default:\n      return state;\n  }\n};\n</code></pre>","tags":["redux"]},{"location":"developer/Redux%20Toolkit/#creating-a-redux-store","title":"Creating a Redux Store","text":"<p>Responsibilities  - Holds the application state - Allows access to state via getState() - Allows state to be updated via dispatch(action) - Registers listeners via subscribe(listener) - Handles unregistering of listeners via the function returned by subscribe(listener)</p> <pre><code>const redux = require(\"redux\");\n\nconst createStore = redux.createStore;\n\n\nconst store = createStore(reducer);\nconsole.log(\"Initial state\", store.getState());\n\nconst unsubscribe = store.subscribe(() =&gt;\n  console.log(\"Updated state\", store.getState())\n);\n\nstore.dispatch(orderCake());\n\nstore.dispatch(orderCake());\n\nstore.dispatch(orderCake());\n\nunsubscribe();\n</code></pre>","tags":["redux"]},{"location":"developer/Redux%20Toolkit/#creating-multiple-reducers-and-combining-them","title":"Creating Multiple Reducers and Combining them","text":"<p>In the initial scenario we only had one Reducer which was related to the cake store, now we will add the ice cream store, this can be done using a single Reducer like below </p>","tags":["redux"]},{"location":"developer/Redux%20Toolkit/#single-reducer","title":"Single Reducer","text":"<pre><code>const redux = require(\"redux\");\nconst createStore = redux.createStore;\nconst bindActionCreators = redux.bindActionCreators;\n\n// Actions\nconst CAKE_ORDERED = \"CAKE_ORDERED\";\nconst CAKE_RESTOCKED = \"CAKE_RESTOCKED\";\nconst ICECREAM_ORDERED = \"ICECREAM_ORDERED\";\nconst ICECREAM_RESTOCKED = \"ICECREAM_RESTOCKED\";\n\nfunction orderCake() {\n  return {\n    type: CAKE_ORDERED,\n    payload: 1,\n  };\n}\n\nfunction restockCake() {\n  return {\n    type: CAKE_RESTOCKED,\n    payload: 20,\n  };\n}\n\nfunction orderIceCream(qty = 1) {\n  return {\n    type: ICECREAM_ORDERED,\n    payload: qty,\n  };\n}\n\nfunction restockIceCream(qty = 1) {\n  return {\n    type: ICECREAM_RESTOCKED,\n    payload: qty,\n  };\n}\n\n// (previousState, action) =&gt; newState;\nconst initialState = {\n  numberOfCakes: 10,\n  numberOfIceCreams: 10,\n};\n\nconst reducer = (state = initialState, action) =&gt; {\n  switch (action.type) {\n    case CAKE_ORDERED:\n      return {\n        ...state,\n        numberOfCakes: state.numberOfCakes - 1,\n      };\n    case CAKE_RESTOCKED:\n      return {\n        ...state,\n        numberOfCakes: action.payload,\n      };\n    case ICECREAM_ORDERED:\n      return {\n        ...state,\n        numberOfIceCreams: state.numberOfIceCreams - action.payload,\n      };\n    case ICECREAM_RESTOCKED:\n      return {\n        ...state,\n        numberOfIceCreams: state.numberOfIceCreams + action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\n\nconst store = createStore(reducer);\nconsole.log(\"Initial state\", store.getState());\n\nconst unsubscribe = store.subscribe(() =&gt;\n  console.log(\"Updated state\", store.getState())\n);\n\nconst actions = bindActionCreators(\n  { orderCake, restockCake, orderIceCream, restockIceCream },\n  store.dispatch\n);\nactions.orderCake();\nactions.orderCake();\nactions.orderCake();\n\nactions.restockCake();\nactions.orderIceCream();\nactions.orderIceCream();\nactions.restockIceCream();\nunsubscribe();\n</code></pre>","tags":["redux"]},{"location":"developer/Redux%20Toolkit/#multiple-reducers","title":"Multiple Reducers","text":"<p>In this case the dispatch will be sent to both the reducers but only the reducer which is meant to handle the action will take the action and update the state. <pre><code>const redux = require(\"redux\");\nconst createStore = redux.createStore;\nconst bindActionCreators = redux.bindActionCreators;\nconst combineReducers = redux.combineReducers;\n\n\nconst CAKE_ORDERED = \"CAKE_ORDERED\";\nconst CAKE_RESTOCKED = \"CAKE_RESTOCKED\";\nconst ICECREAM_ORDERED = \"ICECREAM_ORDERED\";\nconst ICECREAM_RESTOCKED = \"ICECREAM_RESTOCKED\";\n\nfunction orderCake() {\n  return {\n    type: CAKE_ORDERED,\n    payload: 1,\n  };\n}\n\nfunction restockCake() {\n  return {\n    type: CAKE_RESTOCKED,\n    payload: 20,\n  };\n}\n\nfunction orderIceCream(qty = 1) {\n  return {\n    type: ICECREAM_ORDERED,\n    payload: qty,\n  };\n}\n\nfunction restockIceCream(qty = 1) {\n  return {\n    type: ICECREAM_RESTOCKED,\n    payload: qty,\n  };\n}\n\n// (previousState, action) =&gt; newState;\nconst initialState = {\n  numberOfCakes: 10,\n  numberOfIceCreams: 10,\n};\n\nconst cakeReducer = (state = initialState, action) =&gt; {\n  switch (action.type) {\n    case CAKE_ORDERED:\n      return {\n        ...state,\n        numberOfCakes: state.numberOfCakes - 1,\n      };\n    case CAKE_RESTOCKED:\n      return {\n        ...state,\n        numberOfCakes: action.payload,\n      };\n    default:\n      return state;\n  }\n};\nconst iceCreamReducer = (state = initialState, action) =&gt; {\n  switch (action.type) {\n    case ICECREAM_ORDERED:\n      return {\n        ...state,\n        numberOfIceCreams: state.numberOfIceCreams - action.payload,\n      };\n    case ICECREAM_RESTOCKED:\n      return {\n        ...state,\n        numberOfIceCreams: state.numberOfIceCreams + action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\n// we combine the reducer here\nconst rootReducer = combineReducers({\n  cake: cakeReducer,\n  iceCream: iceCreamReducer,\n});\n\nconst store = createStore(rootReducer);\nconsole.log(\"Initial state\", store.getState());\n\nconst unsubscribe = store.subscribe(() =&gt;\n  console.log(\"Updated state\", store.getState())\n);\n\nconst actions = bindActionCreators(\n  { orderCake, restockCake, orderIceCream, restockIceCream },\n  store.dispatch\n);\nactions.orderCake();\nactions.orderCake();\nactions.orderCake();\n\nactions.restockCake();\nactions.orderIceCream();\nactions.orderIceCream();\nactions.restockIceCream();\nunsubscribe();\n</code></pre></p>","tags":["redux"]},{"location":"developer/Redux%20Toolkit/#working-with-nested-states","title":"Working with Nested States","text":"","tags":["redux"]},{"location":"developer/Redux%20Toolkit/#generic-approach","title":"Generic Approach","text":"<p>While working with nested states a developer might need to properly destructure the state while updating it.  For Example:</p> <p>Initial State</p> <pre><code>const initialState = {\n    name:'Red Velvet',\n    details:{\n        price:499,\n        type:'Cheese Cake',\n        size:'Medium'\n    }\n};\n</code></pre> <p>The ideal way to update this state using the reducer would be as follows: <pre><code>const reducer = (state = initialState, action) =&gt; {\n  switch (action.type) {\n    case UPDATE_PRICE:\n      return {\n        ...state,\n        details: {\n          ...state.details,\n          price: action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n</code></pre></p> <p>This is completely doable however the developer needs to take care of carefully destructing the state for all the nested updates being made.</p>","tags":["redux"]},{"location":"developer/Redux%20Toolkit/#using-immer","title":"Using Immer","text":"<p>The immer library comes in handy to handle the above situation</p> <p>Install immer <pre><code>npm install immer\n</code></pre></p> <p>Updated Code</p> <pre><code>const produce = require(\"immer\").produce;\n\nconst reducer = (state = initialState, action) =&gt; {\n  switch (action.type) {\n    case UPDATE_PRICE:\n      return produce(state, (draftState) =&gt; {\n        draftState.details.price = action.payload;\n      });\n    default:\n      return state;\n  }\n};\n</code></pre>","tags":["redux"]},{"location":"developer/Redux%20Toolkit/#redux-middle-ware","title":"Redux Middle ware","text":"<p>For now we will be integrating redux-logger</p>","tags":["redux"]},{"location":"developer/Redux%20Toolkit/#redux-logger","title":"Redux Logger","text":"<p>Install Redux Logger</p> <pre><code>npm install redux-logger\n</code></pre> <p>Add the following to your code <pre><code>const applyMiddleware = redux.applyMiddleware;\nconst reduxLogger = require(\"redux-logger\");\n\nconst logger = reduxLogger.createLogger();\n\n// Apply the logger middleware while creating the store\nconst store = createStore(rootReducer, applyMiddleware(logger));\n</code></pre></p> <p>Output of Logger  <pre><code>Initial state {\n  cake: { numberOfCakes: 10, numberOfIceCreams: 10 },\n  iceCream: { numberOfCakes: 10, numberOfIceCreams: 10 }\n}\n action CAKE_ORDERED @ 23:33:18.538\n   prev state {\n    cake: { numberOfCakes: 10, numberOfIceCreams: 10 },\n    iceCream: { numberOfCakes: 10, numberOfIceCreams: 10 }\n  }\n   action     { type: 'CAKE_ORDERED', payload: 1 }\n   next state {\n    cake: { numberOfCakes: 9, numberOfIceCreams: 10 },\n    iceCream: { numberOfCakes: 10, numberOfIceCreams: 10 }\n  }\n</code></pre></p>","tags":["redux"]},{"location":"developer/Redux%20Toolkit/#redux-async-actions","title":"Redux Async Actions","text":"<p>Install Redux Thunk</p> <pre><code>npm install redux-thunk\n</code></pre> <pre><code>const redux = require(\"redux\");\nconst applyMiddleware = redux.applyMiddleware;\nconst createStore = redux.createStore;\nconst thunkMiddleware = require(\"redux-thunk\").default;\nconst axios = require(\"axios\");\nconst initialState = {\n  loading: false,\n  users: [],\n  error: \"\",\n};\n\n// Action Types\n\nconst FETCH_USERS_REQUEST = \"FETCH_USERS_REQUEST\";\nconst FETCH_USERS_SUCCESS = \"FETCH_USERS_SUCCESS\";\nconst FETCH_USERS_FAILURE = \"FETCH_USERS_FAILURE\";\n\n// Action Creators\n\nconst fetchUsersRequest = () =&gt; {\n  return {\n    type: FETCH_USERS_REQUEST,\n  };\n};\n\nconst fetchUsersSuccess = (users) =&gt; {\n  return {\n    type: FETCH_USERS_SUCCESS,\n    payload: users,\n  };\n};\n\nconst fetchUsersFailure = (error) =&gt; {\n  return {\n    type: FETCH_USERS_FAILURE,\n    payload: error,\n  };\n};\n\n// Reducer\n\nconst reducer = (state = initialState, action) =&gt; {\n  switch (action.type) {\n    case FETCH_USERS_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case FETCH_USERS_SUCCESS:\n      return {\n        loading: false,\n        users: action.payload,\n        error: \"\",\n      };\n    case FETCH_USERS_FAILURE:\n      return {\n        loading: false,\n        users: [],\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nconst fetchUsers = () =&gt; {\n  return function (dispatch) {\n    dispatch(fetchUsersRequest());\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) =&gt; {\n        // response.data is the users\n        const users = response.data.map((user) =&gt; user.id);\n        dispatch(fetchUsersSuccess(users));\n      })\n      .catch((error) =&gt; {\n        // error.message is the error message\n        dispatch(fetchUsersFailure(error.message));\n      });\n  };\n};\n\n// Store\n\nconst store = createStore(reducer, applyMiddleware(thunkMiddleware));\n\n// Subscribe\n\nconst unsubscribe = store.subscribe(() =&gt; console.log(store.getState()));\n\n// Dispatch\nstore.dispatch(fetchUsers());\n</code></pre>","tags":["redux"]},{"location":"developer/Redux%20Toolkit/#redux-toolkit","title":"Redux Toolkit","text":"<p>Redux toolkit is the official, opinionated, batteries include tool set for efficient Redux development.</p>","tags":["redux"]},{"location":"developer/Redux%20Toolkit/#install-redux-toolkit","title":"Install Redux Toolkit","text":"<pre><code>npm install @reduxjs/toolkit\n</code></pre>","tags":["redux"]},{"location":"developer/hello-world/","title":"Hello World Blogpost","text":"<p>Blog excerpt here</p> <p>Rest of blog here ...</p>","tags":["template","how-to"]},{"location":"blog/","title":"Blog","text":""}]}